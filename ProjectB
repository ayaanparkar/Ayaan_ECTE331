package projectB;

class Data {
    int A1, A2, A3, B1, B2, B3;

    boolean goFunA2 = false;
    boolean goFunA3 = false;
    boolean goFunB2 = false;
    boolean goFunB3 = false;
}

class Utils {
    public static int calculateSum(int n) {
        int sum = 0;
        for (int i = 0; i <= n; i++) {
            sum += i;
        }
        return sum;
    }
}

public class Task2 {
    public static void main(String[] args) {
        int testSize = 5;  // Set test size to 5
        Data mySample = new Data();

        for (int i = 0; i < testSize; i++) {
            System.out.println("This iteration " + i);

            // Reset flags directly within the loop
            mySample.goFunA2 = false;
            mySample.goFunA3 = false;
            mySample.goFunB2 = false;
            mySample.goFunB3 = false;

            ThreadA ta = new ThreadA(mySample);
            ThreadB tb = new ThreadB(mySample);
            ta.start();
            tb.start();

            try {
                ta.join();
                tb.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}

class ThreadA extends Thread {
    private final Data sample;

    public ThreadA(Data sample) {
        this.sample = sample;
    }

    public void run() {
        synchronized (sample) {
            sample.A1 = Utils.calculateSum(500);
            System.out.println("A1 finished " + sample.A1);
            sample.goFunB2 = true;
            sample.notify();  // Notify B to proceed
        }

        synchronized (sample) {
            while (!sample.goFunA2) {
                try {
                    sample.wait();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            System.out.println("Waiting in A2 for B2 to be completed");
        }

        synchronized (sample) {
            sample.A2 = sample.B2 + Utils.calculateSum(300);
            System.out.println("A2 finished " + sample.A2);
            sample.goFunB3 = true;
            sample.notify();  // Notify B to proceed
        }

        synchronized (sample) {
            while (!sample.goFunA3) {
                try {
                    sample.wait();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            System.out.println("Waiting in A3 for B3 to be completed");
        }

        synchronized (sample) {
            sample.A3 = sample.B3 + Utils.calculateSum(400);
            System.out.println("A3 finished " + sample.A3);
        }
    }
}

class ThreadB extends Thread {
    private final Data sample;

    public ThreadB(Data sample) {
        this.sample = sample;
    }

    public void run() {
        synchronized (sample) {
            while (!sample.goFunB2) {
                try {
                    sample.wait();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            System.out.println("Waiting in B2 for A1 to be completed");
        }

        synchronized (sample) {
            sample.B2 = sample.A1 + Utils.calculateSum(200);
            System.out.println("B2 finished " + sample.B2);
            sample.goFunA2 = true;
            sample.notify();  // Notify A to proceed
        }

        synchronized (sample) {
            while (!sample.goFunB3) {
                try {
                    sample.wait();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            System.out.println("Waiting in B3 for A2 to be completed");
        }

        synchronized (sample) {
            sample.B3 = sample.A2 + Utils.calculateSum(400);
            System.out.println("B3 finished " + sample.B3);
            sample.goFunA3 = true;
            sample.notify();  // Notify A to proceed
        }
    }
}
